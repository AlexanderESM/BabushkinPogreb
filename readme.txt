Телеграм бот на Spring boot и микросервисной архитектуре
Файлообменник с асинхронной обработкой сообщений

Алгоритм работы приложения:
1 Запуск бота
    Запуск бота, ввод команды /help, получения списка доступных команд
2 Регистрация в приложениии
    Ввод email
3 Завершение регистрации
    Переход по ссылке из входящего письма на указанную при регистрации почту
4 Загрузка контента
    Отправка в чат телеграм бота файлоы и фотографий
5 Скачивание контента
    Получение ссылки на внешний ресурс для скачивания и загрузки файла

План проекта:
1 Создание dispatcher-микросервиса
    Первичная валидация входящих данных
    Распределение сообщений по соответствующим очередям в брокере сообщений RabbitMQ
2 Подключение и настройка брокера сообщений RabbitMQ
3 Создание node-микросервиса
    Обработка сообщений из брокера.
    Сервис может горизонтально масштабироватся. Создаются дополнительные инстансы для паралельной бработке данных
4 Создание RESTful API микросервиса
    Обработка входящих HTTP запросов на скачивание файла и подтверждение решистрации
5 Создание email-микросервиса
    содержит ссылку для регистрации
6 Выполненеи нагрузочного тестирования JMeter (10.000 собщений\мин)
7 Разворачивание системы на отдельном VPS сервере
    На ubuntu + получаем белый ip адрес

Схема
User <=> Telegrem <=> Dispatcher (Spring Boot) <=> RabbitMQ <=> Node1 - Node N - Node N+1 (Spring Boot Spring Data JPA)
                                                                Node разделяется на PostgreSQL & Mail service
User                                <==>                        PostgreSQL <=> RESTful API (Spring Boot Spring Data JPA)
                                                                               RESTful API обращается к базе, выгружать контен и отправлять пользователю
                                                                               RESTful API обрабатывает запросы на подтверждение регистрации
Через dispatcher проходят все сообщения от Телеграма



модуль rest-service - скачивание данных из БД по ссылке